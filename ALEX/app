If you want to specify multiple conditions:
  Client.where("orders_count = ? AND locked = ?", params[:orders], false)

In this example, the first question mark will be replaced with the value in params[:orders] 
and the second will be replaced with the SQL representation of false, which depends on the adapter.

This code is highly preferable:
  Client.where("orders_count = ?", params[:orders])

to this code:
  Client.where("orders_count = #{params[:orders]}")

because of argument safety. Putting the variable directly into the conditions string will pass the variable to the database as-is.
This means that it will be an unescaped variable directly from a user who may have malicious intent. 
If you do this, you put your entire database at risk because once a user finds out he or she can exploit your database
they can do just about anything to it. Never ever put your arguments directly inside the conditions string.

For more information on the dangers of SQL injection, see the Ruby on Rails Security Guide.
2.2.1 Placeholder Conditions

Similar to the (?) replacement style of params, you can also specify keys/values hash in your array conditions:
  Client.where("created_at >= :start_date AND created_at <= :end_date",
              {:start_date => params[:start_date], :end_date => params[:end_date]})

This makes for clearer readability if you have a large number of variable conditions.